#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_dns_1 = __importDefault(require("node:dns"));
const ws_1 = __importDefault(require("ws"));
const const_1 = require("../lib/const");
const parse_args_1 = require("../util/parse-args");
node_dns_1.default.setDefaultResultOrder("ipv4first");
const args = (0, parse_args_1.parseArgs)(["_", "dump", "node", "schemaVersion"]);
const schemaVersion = args.schemaVersion
    ? Number(args.schemaVersion)
    : const_1.maxSchemaVersion;
const url = args._[0] || "ws://localhost:3000";
const filterNode = args.node ? Number(args.node) : undefined;
if (isNaN(schemaVersion) ||
    schemaVersion > const_1.maxSchemaVersion ||
    schemaVersion < 0) {
    console.log("Schema version must be between 0 and ", const_1.maxSchemaVersion);
    process.exit();
}
if (!args.dump) {
    console.info("Connecting to", url);
}
const socket = new ws_1.default(url);
socket.on("open", function open() {
    socket.send(JSON.stringify({
        messageId: "api-schema-id",
        command: "set_api_schema",
        schemaVersion: schemaVersion,
    }));
    socket.send(JSON.stringify({
        messageId: "start-listening-result",
        command: "start_listening",
    }));
});
socket.on("message", (data) => {
    const msg = JSON.parse(data.toString());
    if (filterNode) {
        if (msg.type !== "result" && msg.type !== "event") {
            return;
        }
        if (msg.type === "result" &&
            msg.messageId === "start-listening-result" &&
            msg.success) {
            const state = msg.result.state;
            const nodes = state.nodes.filter((node) => node.nodeId === filterNode);
            if (nodes.length !== 1) {
                console.error("Unable to find node", filterNode);
                process.exit(1);
            }
            state.nodes = nodes;
        }
        else if (msg.type === "event" && msg.event.nodeId !== filterNode) {
            return;
        }
    }
    if (args.dump) {
        console.log(JSON.stringify(msg));
    }
    else {
        console.dir(msg);
    }
});
let closing = false;
const handleShutdown = () => {
    // Pressing ctrl+c twice.
    if (closing) {
        process.exit();
    }
    // Close gracefully
    closing = true;
    if (!args.dump) {
        console.log("Shutting down");
    }
    socket.close();
    process.exit();
};
process.on("SIGINT", handleShutdown);
process.on("SIGTERM", handleShutdown);
