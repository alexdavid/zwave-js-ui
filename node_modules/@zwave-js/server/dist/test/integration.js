"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = __importStar(require("assert"));
const node_dns_1 = __importDefault(require("node:dns"));
const ws_1 = __importDefault(require("ws"));
const zwave_js_1 = require("zwave-js");
const server_1 = require("../lib/server");
const mock_1 = require("../mock");
const const_1 = require("../lib/const");
node_dns_1.default.setDefaultResultOrder("ipv4first");
const PORT = 45001;
const createNextMessage = (socket) => {
    let waitingListener;
    const pendingMessages = [];
    socket.on("message", (data) => {
        const msg = JSON.parse(data);
        if (!waitingListener) {
            pendingMessages.push(msg);
            return;
        }
        const listener = waitingListener;
        waitingListener = undefined;
        listener(msg);
    });
    return () => {
        if (pendingMessages.length) {
            return pendingMessages.splice(0, 1)[0];
        }
        return new Promise((resolve) => {
            waitingListener = resolve;
        });
    };
};
const runTest = async () => {
    const server = new server_1.ZwavejsServer((0, mock_1.createMockDriver)(), { port: PORT });
    await server.start(true);
    let socket = undefined;
    try {
        socket = new ws_1.default(`ws://localhost:${PORT}`);
        const nextMessage = createNextMessage(socket);
        await new Promise((resolve) => socket.once("open", resolve));
        assert.deepEqual(await nextMessage(), {
            driverVersion: zwave_js_1.libVersion,
            homeId: 1,
            serverVersion: require("../../package.json").version,
            minSchemaVersion: const_1.minSchemaVersion,
            maxSchemaVersion: const_1.maxSchemaVersion,
            type: "version",
        });
        socket.send(JSON.stringify({
            command: "initialize",
            messageId: "initialize",
            schemaVersion: const_1.maxSchemaVersion,
        }));
        assert.deepEqual(await nextMessage(), {
            type: "result",
            success: true,
            messageId: "initialize",
            result: {},
        });
        socket.send(JSON.stringify({
            messageId: "my-msg-id!",
            command: "start_listening",
        }));
        assert.deepEqual(await nextMessage(), {
            type: "result",
            success: true,
            messageId: "my-msg-id!",
            result: {
                state: {
                    driver: {
                        logConfig: { enabled: true, level: "debug" },
                        statisticsEnabled: true,
                    },
                    controller: { homeId: 1 },
                    nodes: [],
                },
            },
        });
        console.log("Integration tests passed :)");
    }
    finally {
        if (socket) {
            socket.close();
        }
        await server.destroy();
    }
};
runTest();
