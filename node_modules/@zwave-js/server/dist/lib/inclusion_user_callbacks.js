"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.inclusionUserCallbacks = void 0;
const deferred_promise_1 = require("alcalzone-shared/deferred-promise");
const inclusionUserCallbacks = (clientsController, client) => {
    return {
        grantSecurityClasses: (requested) => {
            clientsController.grantSecurityClassesPromise = (0, deferred_promise_1.createDeferredPromise)();
            clientsController.grantSecurityClassesPromise.catch(() => { });
            clientsController.grantSecurityClassesPromise.finally(() => {
                if (clientsController.grantSecurityClassesPromise !== undefined) {
                    delete clientsController.grantSecurityClassesPromise;
                }
            });
            if (client !== undefined) {
                client.sendEvent({
                    source: "controller",
                    event: "grant security classes",
                    requested: requested,
                });
            }
            else {
                clientsController.clients.forEach((client) => {
                    if (client.isConnected && client.receiveEvents) {
                        client.sendEvent({
                            source: "controller",
                            event: "grant security classes",
                            requested: requested,
                        });
                    }
                });
            }
            return clientsController.grantSecurityClassesPromise;
        },
        validateDSKAndEnterPIN: (dsk) => {
            clientsController.validateDSKAndEnterPinPromise = (0, deferred_promise_1.createDeferredPromise)();
            clientsController.validateDSKAndEnterPinPromise.catch(() => { });
            clientsController.validateDSKAndEnterPinPromise.finally(() => {
                if (clientsController.validateDSKAndEnterPinPromise != undefined) {
                    delete clientsController.validateDSKAndEnterPinPromise;
                }
            });
            if (client !== undefined) {
                client.sendEvent({
                    source: "controller",
                    event: "validate dsk and enter pin",
                    dsk,
                });
            }
            else {
                clientsController.clients.forEach((client) => {
                    if (client.isConnected && client.receiveEvents) {
                        client.sendEvent({
                            source: "controller",
                            event: "validate dsk and enter pin",
                            dsk,
                        });
                    }
                });
            }
            return clientsController.validateDSKAndEnterPinPromise;
        },
        abort: () => {
            delete clientsController.grantSecurityClassesPromise;
            delete clientsController.validateDSKAndEnterPinPromise;
            if (client !== undefined) {
                client.sendEvent({
                    source: "controller",
                    event: "inclusion aborted",
                });
            }
            else {
                clientsController.clients.forEach((client) => {
                    if (client.isConnected && client.receiveEvents) {
                        client.sendEvent({
                            source: "controller",
                            event: "inclusion aborted",
                        });
                    }
                });
            }
        },
    };
};
exports.inclusionUserCallbacks = inclusionUserCallbacks;
