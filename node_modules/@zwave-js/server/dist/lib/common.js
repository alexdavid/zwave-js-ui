"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setRawConfigParameterValue = exports.firmwareUpdateOutgoingMessage = exports.setValueOutgoingMessage = void 0;
const zwave_js_1 = require("zwave-js");
const error_1 = require("./error");
function setValueOutgoingMessage(result, schemaVersion) {
    if (schemaVersion < 29) {
        return {
            success: [
                zwave_js_1.SetValueStatus.Working,
                zwave_js_1.SetValueStatus.Success,
                zwave_js_1.SetValueStatus.SuccessUnsupervised,
            ].includes(result.status),
        };
    }
    return { result };
}
exports.setValueOutgoingMessage = setValueOutgoingMessage;
function firmwareUpdateOutgoingMessage(result, schemaVersion) {
    if (schemaVersion < 29) {
        return {
            success: result.success,
        };
    }
    return { result };
}
exports.firmwareUpdateOutgoingMessage = firmwareUpdateOutgoingMessage;
async function setRawConfigParameterValue(message, nodeOrEndpoint) {
    if ((message.valueSize !== undefined && message.valueFormat === undefined) ||
        (message.valueSize === undefined && message.valueFormat !== undefined)) {
        throw new error_1.InvalidParamsPassedToCommandError("valueFormat and valueSize must be used in combination or not at all");
    }
    if (message.valueSize !== undefined && message.bitMask !== undefined) {
        throw new error_1.InvalidParamsPassedToCommandError("bitMask cannot be used in combination with valueFormat and valueSize");
    }
    let options;
    if (message.bitMask !== undefined) {
        options = {
            parameter: message.parameter,
            bitMask: message.bitMask,
            value: message.value,
        };
    }
    else {
        options = {
            parameter: message.parameter,
            valueFormat: message.valueFormat,
            valueSize: message.valueSize,
            value: message.value,
        };
    }
    const result = await nodeOrEndpoint.commandClasses.Configuration.set(options);
    return { result };
}
exports.setRawConfigParameterValue = setRawConfigParameterValue;
