"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MulticastGroupMessageHandler = void 0;
const error_1 = require("../error");
const command_1 = require("./command");
const common_1 = require("../common");
class MulticastGroupMessageHandler {
    static async handle(message, driver, client) {
        const { command } = message;
        const virtualNode = driver.controller.getMulticastGroup(message.nodeIDs);
        switch (message.command) {
            case command_1.MulticastGroupCommand.setValue: {
                const result = await virtualNode.setValue(message.valueId, message.value, message.options);
                return (0, common_1.setValueOutgoingMessage)(result, client.schemaVersion);
            }
            case command_1.MulticastGroupCommand.getEndpointCount: {
                const count = virtualNode.getEndpointCount();
                return { count };
            }
            case command_1.MulticastGroupCommand.supportsCC: {
                const supported = getVirtualEndpoint(virtualNode, message.nodeIDs, message.index).supportsCC(message.commandClass);
                return { supported };
            }
            case command_1.MulticastGroupCommand.getCCVersion: {
                const version = getVirtualEndpoint(virtualNode, message.nodeIDs, message.index).getCCVersion(message.commandClass);
                return { version };
            }
            case command_1.MulticastGroupCommand.invokeCCAPI: {
                const response = getVirtualEndpoint(virtualNode, message.nodeIDs, message.index).invokeCCAPI(message.commandClass, message.methodName, ...message.args);
                return { response };
            }
            case command_1.MulticastGroupCommand.supportsCCAPI: {
                const supported = getVirtualEndpoint(virtualNode, message.nodeIDs, message.index).supportsCCAPI(message.commandClass);
                return { supported };
            }
            case command_1.MulticastGroupCommand.getDefinedValueIDs: {
                const valueIDs = virtualNode.getDefinedValueIDs();
                return { valueIDs };
            }
            default: {
                throw new error_1.UnknownCommandError(command);
            }
        }
    }
}
exports.MulticastGroupMessageHandler = MulticastGroupMessageHandler;
function getVirtualEndpoint(virtualNode, nodeIDs, index) {
    if (!index)
        return virtualNode;
    const virtualEndpoint = virtualNode.getEndpoint(index);
    if (!virtualEndpoint) {
        throw new error_1.VirtualEndpointNotFoundError(index, nodeIDs, undefined);
    }
    return virtualEndpoint;
}
