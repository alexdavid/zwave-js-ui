import { ControllerStatus, Driver, ZWaveNode, Endpoint, TranslatedValueID, ValueMetadata, DeviceClass, CommandClass, InterviewStage, ZWaveLibraryTypes, FunctionType, ValueType, NodeStatus, DataRate, ZWavePlusNodeType, ZWavePlusRoleType, FLiRS, ProtocolVersion, NodeType, NodeStatistics, ControllerStatistics, InclusionState, FoundNode } from "zwave-js";
import { DeviceConfig } from "@zwave-js/config";
import { CommandClasses, ConfigurationMetadata, ConfigValue, ConfigValueFormat, LogConfig, MaybeNotKnown, RFRegion, SecurityClass, ValueChangeOptions, ValueMetadataAny, ValueMetadataBoolean, ValueMetadataBuffer, ValueMetadataDuration, ValueMetadataNumeric, ValueMetadataString } from "@zwave-js/core";
type Modify<T, R> = Omit<T, keyof R> & R;
type LogConfigState = Omit<LogConfig, "transports">;
export interface DriverState {
    logConfig: LogConfigState;
    statisticsEnabled: boolean;
}
export interface ControllerStateSchema0 {
    libraryVersion?: string;
    type?: ZWaveLibraryTypes;
    homeId?: number;
    ownNodeId?: number;
    isSecondary?: boolean;
    isUsingHomeIdFromOtherNetwork?: boolean;
    isSISPresent?: boolean;
    wasRealPrimary?: boolean;
    isStaticUpdateController?: boolean;
    isSlave?: boolean;
    serialApiVersion?: string;
    manufacturerId?: number;
    productType?: number;
    productId?: number;
    supportedFunctionTypes?: readonly FunctionType[];
    sucNodeId?: number;
    supportsTimers?: boolean;
    isHealNetworkActive: boolean;
    statistics: ControllerStatistics;
    inclusionState: InclusionState;
}
type ControllerStateSchema16 = Omit<Modify<ControllerStateSchema0, {
    sdkVersion?: string;
    firmwareVersion?: string;
}>, "libraryVersion" | "serialApiVersion">;
type ControllerStateSchema22 = Omit<Modify<ControllerStateSchema16, {
    isPrimary?: boolean;
    isSUC?: boolean;
    nodeType?: NodeType;
}>, "isSlave" | "isSecondary" | "isStaticUpdateController">;
interface ControllerStateSchema25 extends ControllerStateSchema22 {
    rfRegion?: RFRegion;
}
interface ControllerStateSchema31 extends ControllerStateSchema25 {
    status: ControllerStatus;
}
type ControllerStateSchema32 = Omit<Modify<ControllerStateSchema31, {
    isRebuildingRoutes: boolean;
}>, "isHealNetworkActive">;
export type ControllerState = ControllerStateSchema0 | ControllerStateSchema16 | ControllerStateSchema22 | ControllerStateSchema25 | ControllerStateSchema31 | ControllerStateSchema32;
export interface ZwaveState {
    driver: DriverState;
    controller: ControllerState;
    nodes: NodeState[];
}
interface CommandClassState {
    id: number;
    name: string;
    version: number;
    isSecure: boolean;
}
interface EndpointStateSchema0 {
    nodeId: number;
    index: number;
    installerIcon?: number;
    userIcon?: number;
}
type EndpointStateSchema3 = Modify<EndpointStateSchema0, {
    deviceClass: DeviceClassState | null;
}>;
type EndpointStateSchema15 = Modify<EndpointStateSchema3, {
    commandClasses: CommandClassState[];
}>;
type EndpointStateSchema26 = Modify<EndpointStateSchema15, {
    endpointLabel?: string;
}>;
type EndpointState = EndpointStateSchema0 | EndpointStateSchema3 | EndpointStateSchema15 | EndpointStateSchema26;
interface DeviceClassState {
    basic: {
        key: number;
        label: string;
    };
    generic: {
        key: number;
        label: string;
    };
    specific: {
        key: number;
        label: string;
    };
    mandatorySupportedCCs: readonly CommandClasses[];
    mandatoryControlledCCs: readonly CommandClasses[];
}
interface ValueState extends TranslatedValueID {
    metadata: ValueMetadata;
    ccVersion: number;
    value?: any;
}
interface ValueMetadataStateSchema0 {
    type: ValueType;
    default?: any;
    readable: boolean;
    writeable: boolean;
    description?: string;
    label?: string;
    ccSpecific?: Record<string, any>;
    valueChangeOptions?: readonly (keyof ValueChangeOptions)[];
    min?: number;
    max?: number;
    minLength?: number;
    maxLength?: number;
    steps?: number;
    states?: Record<number, string>;
    unit?: string;
}
interface ValueMetadataStateSchema28 extends ValueMetadataStateSchema0 {
    stateful?: boolean;
    secret?: boolean;
}
type ValueMetadataState = ValueMetadataStateSchema0 | ValueMetadataStateSchema28;
interface ConfigurationMetadataStateSchema0 {
    type: ValueType;
    readable: boolean;
    writeable: boolean;
    description?: string;
    label?: string;
    ccSpecific?: Record<string, any>;
    valueChangeOptions?: readonly (keyof ValueChangeOptions)[];
    min?: ConfigValue;
    max?: ConfigValue;
    default?: ConfigValue;
    unit?: string;
    valueSize?: number;
    format?: ConfigValueFormat;
    name?: string;
    info?: string;
    noBulkSupport?: boolean;
    isAdvanced?: boolean;
    requiresReInclusion?: boolean;
    states?: Record<number, string>;
    allowManualEntry?: boolean;
    isFromConfig?: boolean;
}
type ConfigurationMetadataStateSchema29 = Omit<ConfigurationMetadataStateSchema0, "name" | "info">;
type ConfigurationMetadataState = ConfigurationMetadataStateSchema0 | ConfigurationMetadataStateSchema29;
interface NodeStateSchema0 extends EndpointStateSchema0 {
    status: NodeStatus;
    ready: boolean;
    isListening?: boolean;
    isFrequentListening: boolean | null;
    isRouting?: boolean;
    maxBaudRate?: DataRate;
    isSecure?: MaybeNotKnown<boolean>;
    version: number | null;
    isBeaming?: boolean;
    manufacturerId?: number;
    productId?: number;
    productType?: number;
    firmwareVersion?: string;
    zwavePlusVersion?: number;
    nodeType?: ZWavePlusNodeType;
    roleType?: ZWavePlusRoleType;
    name?: string;
    location?: string;
    deviceConfig?: DeviceConfig;
    label?: string;
    endpointCountIsDynamic?: boolean;
    endpointsHaveIdenticalCapabilities?: boolean;
    individualEndpointCount?: number;
    aggregatedEndpointCount?: number;
    interviewAttempts: number;
    interviewStage: InterviewStage;
    deviceClass: DeviceClass | null;
    endpoints: EndpointState[];
    values: ValueState[];
}
type NodeStateSchema1 = Modify<NodeStateSchema0, {
    deviceClass: DeviceClassState | null;
    commandClasses: CommandClassState[];
}>;
type NodeStateSchema3 = Omit<Modify<NodeStateSchema1, {
    isFrequentListening?: FLiRS;
    maxDataRate?: DataRate;
    supportedDataRates?: readonly DataRate[];
    protocolVersion?: ProtocolVersion;
    supportsBeaming?: boolean;
    supportsSecurity?: boolean;
    zwavePlusNodeType?: ZWavePlusNodeType;
    zwavePlusRoleType?: ZWavePlusRoleType;
    nodeType?: NodeType;
}>, "maxBaudRate" | "version" | "isBeaming" | "roleType">;
type NodeStateSchema4 = Modify<NodeStateSchema3, {
    interviewStage?: string;
}>;
interface NodeStateSchema5 extends NodeStateSchema4 {
    deviceDatabaseUrl?: string;
}
interface NodeStateSchema7 extends NodeStateSchema5 {
    statistics: NodeStatistics;
}
interface NodeStateSchema10 extends NodeStateSchema7 {
    highestSecurityClass: SecurityClass | undefined;
}
interface NodeStateSchema14 extends NodeStateSchema10 {
    isControllerNode: boolean;
    keepAwake: boolean;
}
type NodeStateSchema29 = Omit<NodeStateSchema14, "commandClasses">;
interface NodeStateSchema30 extends NodeStateSchema29 {
    lastSeen: MaybeNotKnown<Date>;
}
interface NodeStateSchema31 extends NodeStateSchema30 {
    defaultVolume?: number;
    defaultTransitionDuration?: string;
}
export type NodeState = NodeStateSchema0 | NodeStateSchema1 | NodeStateSchema3 | NodeStateSchema4 | NodeStateSchema5 | NodeStateSchema7 | NodeStateSchema10 | NodeStateSchema14 | NodeStateSchema29 | NodeStateSchema30 | NodeStateSchema31;
interface FoundNodeStateSchema19 {
    nodeId: number;
    deviceClass: DeviceClassState | null;
    status: NodeStatus;
}
type FoundNodeStateSchema22 = Omit<FoundNodeStateSchema19, "status">;
type FoundNodeStateSchema23 = Modify<FoundNodeStateSchema22, {
    supportedCCs?: CommandClasses[];
    controlledCCs?: CommandClasses[];
}>;
export type FoundNodeState = FoundNodeStateSchema19 | FoundNodeStateSchema22 | FoundNodeStateSchema23;
export declare const dumpValue: (node: ZWaveNode, valueArgs: TranslatedValueID, schemaVersion: number) => ValueState;
export declare const dumpConfigurationMetadata: (metadata: ConfigurationMetadata, schemaVersion: number) => ConfigurationMetadataState;
export declare const dumpMetadata: (metadata: ValueMetadataAny | ValueMetadataBoolean | ValueMetadataBuffer | ValueMetadataDuration | ValueMetadataNumeric | ValueMetadataString, schemaVersion: number) => ValueMetadataState;
export declare const dumpNode: (node: ZWaveNode, schemaVersion: number) => NodeState;
export declare const dumpFoundNode: (foundNode: FoundNode, schemaVersion: number) => FoundNodeState;
export declare const dumpEndpoint: (endpoint: Endpoint, schemaVersion: number) => EndpointState;
export declare const dumpDeviceClass: (deviceClass: DeviceClass) => DeviceClassState;
export declare const dumpCommandClass: (endpoint: Endpoint, commandClass: CommandClass) => CommandClassState;
export declare const dumpLogConfig: (driver: Driver, schemaVersion: number) => LogConfigState;
export declare const dumpDriver: (driver: Driver, schemaVersion: number) => DriverState;
export declare const dumpController: (driver: Driver, schemaVersion: number) => ControllerState;
export declare const dumpState: (driver: Driver, schemaVersion: number) => ZwaveState;
export {};
