"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationNameFileID = exports.ApplicationNameFile = void 0;
const shared_1 = require("@zwave-js/shared");
const NVMFile_1 = require("./NVMFile");
let ApplicationNameFile = class ApplicationNameFile extends NVMFile_1.NVMFile {
    constructor(options) {
        super(options);
        if ((0, NVMFile_1.gotDeserializationOptions)(options)) {
            this.name = (0, shared_1.cpp2js)(this.payload.toString("utf8"));
        }
        else {
            this.name = options.name;
        }
    }
    name;
    serialize() {
        // Return a zero-terminated string with a fixed length of 30 bytes
        const nameAsString = Buffer.from(this.name, "utf8");
        this.payload = Buffer.alloc(30, 0);
        nameAsString.subarray(0, this.payload.length - 1).copy(this.payload);
        return super.serialize();
    }
};
exports.ApplicationNameFile = ApplicationNameFile;
exports.ApplicationNameFile = ApplicationNameFile = __decorate([
    (0, NVMFile_1.nvmFileID)(0x4100c)
], ApplicationNameFile);
exports.ApplicationNameFileID = (0, NVMFile_1.getNVMFileIDStatic)(ApplicationNameFile);
//# sourceMappingURL=ApplicationNameFile.js.map