/// <reference types="node" />
import { CommandClasses, type MessageOrCCLogEntry } from "@zwave-js/core";
import { type MaybeNotKnown } from "@zwave-js/core/safe";
import type { ZWaveApplicationHost, ZWaveHost } from "@zwave-js/host";
import { CCAPI, POLL_VALUE, type PollValueImplementation } from "../lib/API";
import { type CCCommandOptions, CommandClass, type CommandClassDeserializationOptions } from "../lib/CommandClass";
import { EnergyProductionCommand, EnergyProductionParameter, type EnergyProductionScale } from "../lib/_Types";
export declare const EnergyProductionCCValues: Readonly<{
    value: ((parameter: EnergyProductionParameter) => {
        readonly meta: {
            readonly label: string;
            readonly writeable: false;
            readonly type: "number";
            readonly readable: true;
        };
        readonly id: {
            commandClass: (typeof CommandClasses)["Energy Production"];
            property: "value";
            propertyKey: EnergyProductionParameter;
        };
        readonly endpoint: (endpoint?: number | undefined) => {
            readonly commandClass: (typeof CommandClasses)["Energy Production"];
            readonly endpoint: number;
            readonly property: "value";
            readonly propertyKey: EnergyProductionParameter;
        };
    }) & {
        is: (valueId: import("@zwave-js/core").ValueID) => boolean;
        readonly options: {
            readonly internal: false;
            readonly minVersion: 1;
            readonly secret: false;
            readonly stateful: true;
            readonly supportsEndpoints: true;
            readonly autoCreate: true;
        };
    };
}>;
export declare class EnergyProductionCCAPI extends CCAPI {
    supportsCommand(cmd: EnergyProductionCommand): MaybeNotKnown<boolean>;
    protected get [POLL_VALUE](): PollValueImplementation;
    get(parameter: EnergyProductionParameter): Promise<MaybeNotKnown<{
        value: number;
        scale: EnergyProductionScale;
    }>>;
}
export declare class EnergyProductionCC extends CommandClass {
    ccCommand: EnergyProductionCommand;
    interview(applHost: ZWaveApplicationHost): Promise<void>;
    refreshValues(applHost: ZWaveApplicationHost): Promise<void>;
}
export interface EnergyProductionCCReportOptions extends CCCommandOptions {
    parameter: EnergyProductionParameter;
    scale: EnergyProductionScale;
    value: number;
}
export declare class EnergyProductionCCReport extends EnergyProductionCC {
    constructor(host: ZWaveHost, options: CommandClassDeserializationOptions | EnergyProductionCCReportOptions);
    readonly parameter: EnergyProductionParameter;
    readonly scale: EnergyProductionScale;
    readonly value: number;
    persistValues(applHost: ZWaveApplicationHost): boolean;
    serialize(): Buffer;
    toLogEntry(applHost: ZWaveApplicationHost): MessageOrCCLogEntry;
}
export interface EnergyProductionCCGetOptions extends CCCommandOptions {
    parameter: EnergyProductionParameter;
}
export declare class EnergyProductionCCGet extends EnergyProductionCC {
    constructor(host: ZWaveHost, options: CommandClassDeserializationOptions | EnergyProductionCCGetOptions);
    parameter: EnergyProductionParameter;
    serialize(): Buffer;
    toLogEntry(applHost: ZWaveApplicationHost): MessageOrCCLogEntry;
}
//# sourceMappingURL=EnergyProductionCC.d.ts.map