"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicCCGet = exports.BasicCCReport = exports.BasicCCSet = exports.BasicCC = exports.BasicCCAPI = exports.BasicCCValues = void 0;
function __assertType(argName, typeName, boundHasError) {
    const { ZWaveError, ZWaveErrorCodes } = require("@zwave-js/core");
    if (boundHasError()) {
        throw new ZWaveError(typeName ? `${argName} is not a ${typeName}` : `${argName} has the wrong type`, ZWaveErrorCodes.Argument_Invalid);
    }
}
const __assertType__number = $o => {
    function _number($o) {
        return typeof $o !== "number" ? {} : null;
    }
    return _number($o);
};
const safe_1 = require("@zwave-js/core/safe");
const safe_2 = require("@zwave-js/shared/safe");
const API_1 = require("../lib/API");
const CommandClass_1 = require("../lib/CommandClass");
const CommandClassDecorators_1 = require("../lib/CommandClassDecorators");
const Values_1 = require("../lib/Values");
const _Types_1 = require("../lib/_Types");
exports.BasicCCValues = Object.freeze({
    ...Values_1.V.defineStaticCCValues(safe_1.CommandClasses.Basic, {
        ...Values_1.V.staticProperty("currentValue", {
            ...safe_1.ValueMetadata.ReadOnlyLevel,
            label: "Current value",
        }),
        ...Values_1.V.staticProperty("targetValue", {
            ...safe_1.ValueMetadata.UInt8,
            label: "Target value",
            forceCreation: true,
        }),
        ...Values_1.V.staticProperty("duration", {
            ...safe_1.ValueMetadata.ReadOnlyDuration,
            label: "Remaining duration",
            minVersion: 2,
        }),
        ...Values_1.V.staticProperty("restorePrevious", {
            ...safe_1.ValueMetadata.WriteOnlyBoolean,
            label: "Restore previous value",
            states: {
                true: "Restore",
            },
        }),
        ...Values_1.V.staticPropertyWithName("compatEvent", "event", {
            ...safe_1.ValueMetadata.ReadOnlyUInt8,
            label: "Event value",
        }, {
            stateful: false,
            autoCreate: false,
        }),
    }),
});
let BasicCCAPI = class BasicCCAPI extends API_1.CCAPI {
    supportsCommand(cmd) {
        switch (cmd) {
            case _Types_1.BasicCommand.Get:
                return this.isSinglecast();
            case _Types_1.BasicCommand.Set:
                return true;
        }
        return super.supportsCommand(cmd);
    }
    get [API_1.SET_VALUE]() {
        return async function ({ property }, value) {
            // Enable restoring the previous non-zero value
            if (property === "restorePrevious") {
                property = "targetValue";
                value = 255;
            }
            if (property !== "targetValue") {
                (0, API_1.throwUnsupportedProperty)(this.ccId, property);
            }
            if (typeof value !== "number") {
                (0, API_1.throwWrongValueType)(this.ccId, property, "number", typeof value);
            }
            return this.set(value);
        };
    }
    [API_1.SET_VALUE_HOOKS] = ({ property }, value, _options) => {
        // Enable restoring the previous non-zero value
        if (property === "restorePrevious") {
            property = "targetValue";
            value = 255;
        }
        if (property === "targetValue") {
            const currentValueValueId = exports.BasicCCValues.currentValue.endpoint(this.endpoint.index);
            return {
                optimisticallyUpdateRelatedValues: (_supervisedAndSuccessful) => {
                    // Only update currentValue for valid target values
                    if (typeof value === "number"
                        && value >= 0
                        && value <= 99) {
                        if (this.isSinglecast()) {
                            this.tryGetValueDB()?.setValue(currentValueValueId, value);
                        }
                        else if (this.isMulticast()) {
                            // Figure out which nodes were affected by this command
                            const affectedNodes = this.endpoint.node
                                .physicalNodes.filter((node) => node
                                .getEndpoint(this.endpoint.index)
                                ?.supportsCC(this.ccId));
                            // and optimistically update the currentValue
                            for (const node of affectedNodes) {
                                this.applHost
                                    .tryGetValueDB(node.id)
                                    ?.setValue(currentValueValueId, value);
                            }
                        }
                    }
                },
                forceVerifyChanges: () => {
                    // If we don't know the actual value, we need to verify the change, regardless of the supervision result
                    return value === 255;
                },
                verifyChanges: () => {
                    if (this.isSinglecast()
                        // We generally don't want to poll for multicasts because of how much traffic it can cause
                        // However, when setting the value 255 (ON), we don't know the actual state
                        || (this.isMulticast() && value === 255)) {
                        // We query currentValue instead of targetValue to make sure that unsolicited updates cancel the scheduled poll
                        this.schedulePoll(currentValueValueId, value === 255 ? undefined : value);
                    }
                },
            };
        }
    };
    get [API_1.POLL_VALUE]() {
        return async function ({ property }) {
            switch (property) {
                case "currentValue":
                case "targetValue":
                case "duration":
                    return (await this.get())?.[property];
                default:
                    (0, API_1.throwUnsupportedProperty)(this.ccId, property);
            }
        };
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    async get() {
        this.assertSupportsCommand(_Types_1.BasicCommand, _Types_1.BasicCommand.Get);
        const cc = new BasicCCGet(this.applHost, {
            nodeId: this.endpoint.nodeId,
            endpoint: this.endpoint.index,
        });
        const response = await this.applHost.sendCommand(cc, this.commandOptions);
        if (response) {
            this.tryGetValueDB()?.setValue(exports.BasicCCValues.currentValue.endpoint(this.endpoint.index), response.currentValue);
            return (0, safe_2.pick)(response, ["currentValue", "targetValue", "duration"]);
        }
    }
    async set(targetValue) {
        __assertType("targetValue", "number", __assertType__number.bind(void 0, targetValue));
        this.assertSupportsCommand(_Types_1.BasicCommand, _Types_1.BasicCommand.Set);
        const cc = new BasicCCSet(this.applHost, {
            nodeId: this.endpoint.nodeId,
            endpoint: this.endpoint.index,
            targetValue,
        });
        return this.applHost.sendCommand(cc, this.commandOptions);
    }
};
exports.BasicCCAPI = BasicCCAPI;
exports.BasicCCAPI = BasicCCAPI = __decorate([
    (0, CommandClassDecorators_1.API)(safe_1.CommandClasses.Basic)
], BasicCCAPI);
let BasicCC = class BasicCC extends CommandClass_1.CommandClass {
    async interview(applHost) {
        const node = this.getNode(applHost);
        const endpoint = this.getEndpoint(applHost);
        applHost.controllerLog.logNode(node.id, {
            endpoint: this.endpointIndex,
            message: `Interviewing ${this.ccName}...`,
            direction: "none",
        });
        // try to query the current state
        await this.refreshValues(applHost);
        // Remove Basic CC support when there was no response
        if (this.getValue(applHost, exports.BasicCCValues.currentValue) == undefined) {
            applHost.controllerLog.logNode(node.id, {
                endpoint: this.endpointIndex,
                message: "No response to Basic Get command, assuming the node does not support Basic CC...",
            });
            // SDS14223: A controlling node MUST conclude that the Basic Command Class is not supported by a node (or
            // endpoint) if no Basic Report is returned.
            endpoint.addCC(safe_1.CommandClasses.Basic, { isSupported: false });
            if (!endpoint.controlsCC(safe_1.CommandClasses.Basic)) {
                endpoint.removeCC(safe_1.CommandClasses.Basic);
            }
        }
        // Remember that the interview is complete
        this.setInterviewComplete(applHost, true);
    }
    async refreshValues(applHost) {
        const node = this.getNode(applHost);
        const endpoint = this.getEndpoint(applHost);
        const api = API_1.CCAPI.create(safe_1.CommandClasses.Basic, applHost, endpoint).withOptions({
            priority: safe_1.MessagePriority.NodeQuery,
        });
        // try to query the current state
        applHost.controllerLog.logNode(node.id, {
            endpoint: this.endpointIndex,
            message: "querying Basic CC state...",
            direction: "outbound",
        });
        const basicResponse = await api.get();
        if (basicResponse) {
            let logMessage = `received Basic CC state:
current value:      ${basicResponse.currentValue}`;
            if (basicResponse.targetValue != undefined) {
                logMessage += `
target value:       ${basicResponse.targetValue}
remaining duration: ${basicResponse.duration?.toString() ?? "undefined"}`;
            }
            applHost.controllerLog.logNode(node.id, {
                endpoint: this.endpointIndex,
                message: logMessage,
                direction: "inbound",
            });
        }
    }
    getDefinedValueIDs(applHost) {
        const ret = [];
        // Defer to the base implementation if Basic CC is supported
        const endpoint = this.getEndpoint(applHost);
        if (endpoint.supportsCC(this.ccId)) {
            ret.push(...super.getDefinedValueIDs(applHost));
        }
        if (!!applHost.getDeviceConfig?.(endpoint.nodeId)?.compat
            ?.treatBasicSetAsEvent) {
            // Add the compat event value if it should be exposed
            ret.push(exports.BasicCCValues.compatEvent.endpoint(endpoint.index));
        }
        else if (endpoint.controlsCC(safe_1.CommandClasses.Basic)) {
            // Otherwise, only expose currentValue on devices that only control Basic CC
            ret.push(exports.BasicCCValues.currentValue.endpoint(endpoint.index));
        }
        return ret;
    }
};
exports.BasicCC = BasicCC;
exports.BasicCC = BasicCC = __decorate([
    (0, CommandClassDecorators_1.commandClass)(safe_1.CommandClasses.Basic),
    (0, CommandClassDecorators_1.implementedVersion)(2) // Update tests in CommandClass.test.ts when changing this
    ,
    (0, CommandClassDecorators_1.ccValues)(exports.BasicCCValues)
], BasicCC);
let BasicCCSet = class BasicCCSet extends BasicCC {
    constructor(host, options) {
        super(host, options);
        if ((0, CommandClass_1.gotDeserializationOptions)(options)) {
            (0, safe_1.validatePayload)(this.payload.length >= 1);
            this.targetValue = this.payload[0];
        }
        else {
            this.targetValue = options.targetValue;
        }
    }
    targetValue;
    serialize() {
        this.payload = Buffer.from([this.targetValue]);
        return super.serialize();
    }
    toLogEntry(applHost) {
        return {
            ...super.toLogEntry(applHost),
            message: { "target value": this.targetValue },
        };
    }
};
exports.BasicCCSet = BasicCCSet;
exports.BasicCCSet = BasicCCSet = __decorate([
    (0, CommandClassDecorators_1.CCCommand)(_Types_1.BasicCommand.Set),
    (0, CommandClassDecorators_1.useSupervision)()
], BasicCCSet);
let BasicCCReport = class BasicCCReport extends BasicCC {
    // @noCCValues See comment in the constructor
    constructor(host, options) {
        super(host, options);
        if ((0, CommandClass_1.gotDeserializationOptions)(options)) {
            (0, safe_1.validatePayload)(this.payload.length >= 1);
            this._currentValue =
                // 0xff is a legacy value for 100% (99)
                this.payload[0] === 0xff
                    ? 99
                    : (0, safe_1.parseMaybeNumber)(this.payload[0]);
            if (this.payload.length >= 3) {
                this.targetValue = (0, safe_1.parseMaybeNumber)(this.payload[1]);
                this.duration = safe_1.Duration.parseReport(this.payload[2]);
            }
        }
        else {
            this._currentValue = options.currentValue;
            if ("targetValue" in options) {
                this.targetValue = options.targetValue;
                this.duration = options.duration;
            }
        }
    }
    _currentValue;
    get currentValue() {
        return this._currentValue;
    }
    targetValue;
    duration;
    serialize() {
        const payload = [
            typeof this.currentValue !== "number" ? 0xfe : this.currentValue,
        ];
        if (this.version >= 2
            && this.targetValue !== undefined
            && this.duration) {
            payload.push(this.targetValue ?? 0xfe, this.duration.serializeReport());
        }
        this.payload = Buffer.from(payload);
        return super.serialize();
    }
    toLogEntry(applHost) {
        const message = {
            "current value": (0, safe_1.maybeUnknownToString)(this.currentValue),
        };
        if (this.targetValue !== undefined) {
            message["target value"] = (0, safe_1.maybeUnknownToString)(this.targetValue);
        }
        if (this.duration != undefined) {
            message.duration = this.duration.toString();
        }
        return {
            ...super.toLogEntry(applHost),
            message,
        };
    }
};
exports.BasicCCReport = BasicCCReport;
__decorate([
    (0, CommandClassDecorators_1.ccValue)(exports.BasicCCValues.currentValue)
], BasicCCReport.prototype, "currentValue", null);
__decorate([
    (0, CommandClassDecorators_1.ccValue)(exports.BasicCCValues.targetValue)
], BasicCCReport.prototype, "targetValue", void 0);
__decorate([
    (0, CommandClassDecorators_1.ccValue)(exports.BasicCCValues.duration)
], BasicCCReport.prototype, "duration", void 0);
exports.BasicCCReport = BasicCCReport = __decorate([
    (0, CommandClassDecorators_1.CCCommand)(_Types_1.BasicCommand.Report)
], BasicCCReport);
let BasicCCGet = class BasicCCGet extends BasicCC {
};
exports.BasicCCGet = BasicCCGet;
exports.BasicCCGet = BasicCCGet = __decorate([
    (0, CommandClassDecorators_1.CCCommand)(_Types_1.BasicCommand.Get),
    (0, CommandClassDecorators_1.expectedCCResponse)(BasicCCReport)
], BasicCCGet);
//# sourceMappingURL=BasicCC.js.map