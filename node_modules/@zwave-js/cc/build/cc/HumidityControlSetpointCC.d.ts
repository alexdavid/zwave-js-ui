/// <reference types="node" />
import type { Scale } from "@zwave-js/config";
import { CommandClasses, type MaybeNotKnown, type MessageOrCCLogEntry, type SupervisionResult } from "@zwave-js/core/safe";
import type { ZWaveApplicationHost, ZWaveHost } from "@zwave-js/host/safe";
import { CCAPI, POLL_VALUE, type PollValueImplementation, SET_VALUE, type SetValueImplementation } from "../lib/API";
import { type CCCommandOptions, CommandClass, type CommandClassDeserializationOptions } from "../lib/CommandClass";
import { type HumidityControlSetpointCapabilities, HumidityControlSetpointCommand, HumidityControlSetpointType, type HumidityControlSetpointValue } from "../lib/_Types";
export declare const HumidityControlSetpointCCValues: Readonly<{
    setpointScale: ((setpointType: number) => {
        readonly meta: {
            readonly label: `Setpoint scale (${string})`;
            readonly writeable: false;
            readonly min: 0;
            readonly max: 255;
            readonly type: "number";
            readonly readable: true;
        };
        readonly id: {
            commandClass: (typeof CommandClasses)["Humidity Control Setpoint"];
            property: "setpointScale";
            propertyKey: number;
        };
        readonly endpoint: (endpoint?: number | undefined) => {
            readonly commandClass: (typeof CommandClasses)["Humidity Control Setpoint"];
            readonly endpoint: number;
            readonly property: "setpointScale";
            readonly propertyKey: number;
        };
    }) & {
        is: (valueId: import("@zwave-js/core/safe").ValueID) => boolean;
        readonly options: {
            readonly internal: false;
            readonly minVersion: 1;
            readonly secret: false;
            readonly stateful: true;
            readonly supportsEndpoints: true;
            readonly autoCreate: true;
        };
    };
    setpoint: ((setpointType: number) => {
        readonly meta: {
            readonly label: `Setpoint (${string})`;
            readonly ccSpecific: {
                readonly setpointType: number;
            };
            readonly type: "number";
            readonly readable: true;
            readonly writeable: true;
        };
        readonly id: {
            commandClass: (typeof CommandClasses)["Humidity Control Setpoint"];
            property: "setpoint";
            propertyKey: number;
        };
        readonly endpoint: (endpoint?: number | undefined) => {
            readonly commandClass: (typeof CommandClasses)["Humidity Control Setpoint"];
            readonly endpoint: number;
            readonly property: "setpoint";
            readonly propertyKey: number;
        };
    }) & {
        is: (valueId: import("@zwave-js/core/safe").ValueID) => boolean;
        readonly options: {
            readonly internal: false;
            readonly minVersion: 1;
            readonly secret: false;
            readonly stateful: true;
            readonly supportsEndpoints: true;
            readonly autoCreate: true;
        };
    };
    supportedSetpointTypes: {
        readonly id: {
            commandClass: (typeof CommandClasses)["Humidity Control Setpoint"];
            property: "supportedSetpointTypes";
        };
        readonly endpoint: (endpoint?: number | undefined) => {
            readonly commandClass: (typeof CommandClasses)["Humidity Control Setpoint"];
            readonly endpoint: number;
            readonly property: "supportedSetpointTypes";
        };
        readonly is: (valueId: import("@zwave-js/core/safe").ValueID) => boolean;
        readonly meta: {
            readonly type: "any";
            readonly readable: true;
            readonly writeable: true;
        };
        readonly options: {
            readonly stateful: true;
            readonly secret: false;
            readonly minVersion: 1;
            readonly supportsEndpoints: true;
            readonly autoCreate: true;
            readonly internal: true;
        };
    };
}>;
export declare class HumidityControlSetpointCCAPI extends CCAPI {
    supportsCommand(cmd: HumidityControlSetpointCommand): MaybeNotKnown<boolean>;
    protected get [SET_VALUE](): SetValueImplementation;
    protected get [POLL_VALUE](): PollValueImplementation;
    get(setpointType: HumidityControlSetpointType): Promise<MaybeNotKnown<HumidityControlSetpointValue>>;
    set(setpointType: HumidityControlSetpointType, value: number, scale: number): Promise<SupervisionResult | undefined>;
    getCapabilities(setpointType: HumidityControlSetpointType): Promise<MaybeNotKnown<HumidityControlSetpointCapabilities>>;
    getSupportedSetpointTypes(): Promise<MaybeNotKnown<readonly HumidityControlSetpointType[]>>;
    getSupportedScales(setpointType: HumidityControlSetpointType): Promise<MaybeNotKnown<readonly Scale[]>>;
}
export declare class HumidityControlSetpointCC extends CommandClass {
    ccCommand: HumidityControlSetpointCommand;
    translatePropertyKey(applHost: ZWaveApplicationHost, property: string | number, propertyKey: string | number): string | undefined;
    interview(applHost: ZWaveApplicationHost): Promise<void>;
    refreshValues(applHost: ZWaveApplicationHost): Promise<void>;
}
export interface HumidityControlSetpointCCSetOptions extends CCCommandOptions {
    setpointType: HumidityControlSetpointType;
    value: number;
    scale: number;
}
export declare class HumidityControlSetpointCCSet extends HumidityControlSetpointCC {
    constructor(host: ZWaveHost, options: CommandClassDeserializationOptions | HumidityControlSetpointCCSetOptions);
    setpointType: HumidityControlSetpointType;
    value: number;
    scale: number;
    serialize(): Buffer;
    toLogEntry(applHost: ZWaveApplicationHost): MessageOrCCLogEntry;
}
export declare class HumidityControlSetpointCCReport extends HumidityControlSetpointCC {
    constructor(host: ZWaveHost, options: CommandClassDeserializationOptions);
    persistValues(applHost: ZWaveApplicationHost): boolean;
    private _type;
    get type(): HumidityControlSetpointType;
    readonly scale: number;
    private _value;
    get value(): number;
    toLogEntry(applHost: ZWaveApplicationHost): MessageOrCCLogEntry;
}
export interface HumidityControlSetpointCCGetOptions extends CCCommandOptions {
    setpointType: HumidityControlSetpointType;
}
export declare class HumidityControlSetpointCCGet extends HumidityControlSetpointCC {
    constructor(host: ZWaveHost, options: CommandClassDeserializationOptions | HumidityControlSetpointCCGetOptions);
    setpointType: HumidityControlSetpointType;
    serialize(): Buffer;
    toLogEntry(applHost: ZWaveApplicationHost): MessageOrCCLogEntry;
}
export declare class HumidityControlSetpointCCSupportedReport extends HumidityControlSetpointCC {
    constructor(host: ZWaveHost, options: CommandClassDeserializationOptions);
    readonly supportedSetpointTypes: readonly HumidityControlSetpointType[];
    toLogEntry(applHost: ZWaveApplicationHost): MessageOrCCLogEntry;
}
export declare class HumidityControlSetpointCCSupportedGet extends HumidityControlSetpointCC {
}
export declare class HumidityControlSetpointCCScaleSupportedReport extends HumidityControlSetpointCC {
    constructor(host: ZWaveHost, options: CommandClassDeserializationOptions);
    readonly supportedScales: readonly number[];
    toLogEntry(applHost: ZWaveApplicationHost): MessageOrCCLogEntry;
}
export interface HumidityControlSetpointCCScaleSupportedGetOptions extends CCCommandOptions {
    setpointType: HumidityControlSetpointType;
}
export declare class HumidityControlSetpointCCScaleSupportedGet extends HumidityControlSetpointCC {
    constructor(host: ZWaveHost, options: CommandClassDeserializationOptions | HumidityControlSetpointCCScaleSupportedGetOptions);
    setpointType: HumidityControlSetpointType;
    serialize(): Buffer;
    toLogEntry(applHost: ZWaveApplicationHost): MessageOrCCLogEntry;
}
export declare class HumidityControlSetpointCCCapabilitiesReport extends HumidityControlSetpointCC {
    constructor(host: ZWaveHost, options: CommandClassDeserializationOptions);
    persistValues(applHost: ZWaveApplicationHost): boolean;
    private _type;
    get type(): HumidityControlSetpointType;
    private _minValue;
    get minValue(): number;
    private _maxValue;
    get maxValue(): number;
    private _minValueScale;
    get minValueScale(): number;
    private _maxValueScale;
    get maxValueScale(): number;
    toLogEntry(applHost: ZWaveApplicationHost): MessageOrCCLogEntry;
}
export interface HumidityControlSetpointCCCapabilitiesGetOptions extends CCCommandOptions {
    setpointType: HumidityControlSetpointType;
}
export declare class HumidityControlSetpointCCCapabilitiesGet extends HumidityControlSetpointCC {
    constructor(host: ZWaveHost, options: CommandClassDeserializationOptions | HumidityControlSetpointCCCapabilitiesGetOptions);
    setpointType: HumidityControlSetpointType;
    serialize(): Buffer;
    toLogEntry(applHost: ZWaveApplicationHost): MessageOrCCLogEntry;
}
//# sourceMappingURL=HumidityControlSetpointCC.d.ts.map