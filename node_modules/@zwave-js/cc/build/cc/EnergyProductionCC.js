"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnergyProductionCCGet = exports.EnergyProductionCCReport = exports.EnergyProductionCC = exports.EnergyProductionCCAPI = exports.EnergyProductionCCValues = void 0;
function __assertType(argName, typeName, boundHasError) {
    const { ZWaveError, ZWaveErrorCodes } = require("@zwave-js/core");
    if (boundHasError()) {
        throw new ZWaveError(typeName ? `${argName} is not a ${typeName}` : `${argName} has the wrong type`, ZWaveErrorCodes.Argument_Invalid);
    }
}
const __assertType__EnergyProductionParameter = $o => {
    function su__1__2__3__4_eu($o) {
        return ![0, 1, 2, 3].includes($o) ? {} : null;
    }
    return su__1__2__3__4_eu($o);
};
const core_1 = require("@zwave-js/core");
const shared_1 = require("@zwave-js/shared");
const API_1 = require("../lib/API");
const CommandClass_1 = require("../lib/CommandClass");
const CommandClassDecorators_1 = require("../lib/CommandClassDecorators");
const Values_1 = require("../lib/Values");
const _Types_1 = require("../lib/_Types");
exports.EnergyProductionCCValues = Object.freeze({
    ...Values_1.V.defineStaticCCValues(core_1.CommandClasses["Energy Production"], {
    // Static CC values go here
    }),
    ...Values_1.V.defineDynamicCCValues(core_1.CommandClasses["Energy Production"], {
        // Dynamic CC values go here
        ...Values_1.V.dynamicPropertyAndKeyWithName("value", "value", (parameter) => parameter, ({ property, propertyKey }) => property === "value" && typeof propertyKey === "number", (parameter) => ({
            ...core_1.ValueMetadata.ReadOnlyNumber,
            label: (0, shared_1.getEnumMemberName)(_Types_1.EnergyProductionParameter, parameter),
            // unit and ccSpecific are set dynamically
        })),
    }),
});
let EnergyProductionCCAPI = class EnergyProductionCCAPI extends API_1.CCAPI {
    supportsCommand(cmd) {
        switch (cmd) {
            case _Types_1.EnergyProductionCommand.Get:
                return true; // This is mandatory
        }
        return super.supportsCommand(cmd);
    }
    get [API_1.POLL_VALUE]() {
        return async function ({ property, propertyKey }) {
            if (exports.EnergyProductionCCValues.value.is({
                commandClass: this.ccId,
                property,
                propertyKey,
            })) {
                return (await this.get(property))
                    ?.value;
            }
            else {
                (0, API_1.throwUnsupportedProperty)(this.ccId, property);
            }
        };
    }
    async get(parameter) {
        __assertType("parameter", "EnergyProductionParameter", __assertType__EnergyProductionParameter.bind(void 0, parameter));
        this.assertSupportsCommand(_Types_1.EnergyProductionCommand, _Types_1.EnergyProductionCommand.Get);
        const cc = new EnergyProductionCCGet(this.applHost, {
            nodeId: this.endpoint.nodeId,
            endpoint: this.endpoint.index,
            parameter,
        });
        const response = await this.applHost.sendCommand(cc, this.commandOptions);
        if (response) {
            return (0, shared_1.pick)(response, ["value", "scale"]);
        }
    }
};
exports.EnergyProductionCCAPI = EnergyProductionCCAPI;
exports.EnergyProductionCCAPI = EnergyProductionCCAPI = __decorate([
    (0, CommandClassDecorators_1.API)(core_1.CommandClasses["Energy Production"])
], EnergyProductionCCAPI);
let EnergyProductionCC = class EnergyProductionCC extends CommandClass_1.CommandClass {
    async interview(applHost) {
        const node = this.getNode(applHost);
        applHost.controllerLog.logNode(node.id, {
            endpoint: this.endpointIndex,
            message: `Interviewing ${this.ccName}...`,
            direction: "none",
        });
        // Query current values
        await this.refreshValues(applHost);
        // Remember that the interview is complete
        this.setInterviewComplete(applHost, true);
    }
    async refreshValues(applHost) {
        const node = this.getNode(applHost);
        const endpoint = this.getEndpoint(applHost);
        const api = API_1.CCAPI.create(core_1.CommandClasses["Energy Production"], applHost, endpoint).withOptions({
            priority: core_1.MessagePriority.NodeQuery,
        });
        for (const parameter of [
            _Types_1.EnergyProductionParameter.Power,
            _Types_1.EnergyProductionParameter["Production Total"],
            _Types_1.EnergyProductionParameter["Production Today"],
            _Types_1.EnergyProductionParameter["Total Time"],
        ]) {
            applHost.controllerLog.logNode(node.id, {
                endpoint: this.endpointIndex,
                message: `querying energy production (${(0, shared_1.getEnumMemberName)(_Types_1.EnergyProductionParameter, parameter)})...`,
                direction: "outbound",
            });
            await api.get(parameter);
        }
    }
};
exports.EnergyProductionCC = EnergyProductionCC;
exports.EnergyProductionCC = EnergyProductionCC = __decorate([
    (0, CommandClassDecorators_1.commandClass)(core_1.CommandClasses["Energy Production"]),
    (0, CommandClassDecorators_1.implementedVersion)(1),
    (0, CommandClassDecorators_1.ccValues)(exports.EnergyProductionCCValues)
], EnergyProductionCC);
let EnergyProductionCCReport = class EnergyProductionCCReport extends EnergyProductionCC {
    constructor(host, options) {
        super(host, options);
        if ((0, CommandClass_1.gotDeserializationOptions)(options)) {
            (0, core_1.validatePayload)(this.payload.length >= 2);
            this.parameter = this.payload[0];
            const { value, scale } = (0, core_1.parseFloatWithScale)(this.payload.subarray(1));
            this.value = value;
            this.scale = (0, _Types_1.getEnergyProductionScale)(this.parameter, scale);
        }
        else {
            this.parameter = options.parameter;
            this.value = options.value;
            this.scale = options.scale;
        }
    }
    parameter;
    scale;
    value;
    persistValues(applHost) {
        if (!super.persistValues(applHost))
            return false;
        const valueValue = exports.EnergyProductionCCValues.value(this.parameter);
        this.setMetadata(applHost, valueValue, {
            ...valueValue.meta,
            unit: this.scale.unit,
            ccSpecific: {
                parameter: this.parameter,
                scale: this.scale.key,
            },
        });
        this.setValue(applHost, valueValue, this.value);
        return true;
    }
    serialize() {
        this.payload = Buffer.concat([
            Buffer.from([this.parameter]),
            (0, core_1.encodeFloatWithScale)(this.value, this.scale.key),
        ]);
        return super.serialize();
    }
    toLogEntry(applHost) {
        return {
            ...super.toLogEntry(applHost),
            message: {
                [(0, shared_1.getEnumMemberName)(_Types_1.EnergyProductionParameter, this.parameter).toLowerCase()]: `${this.value} ${this.scale.unit}`,
            },
        };
    }
};
exports.EnergyProductionCCReport = EnergyProductionCCReport;
exports.EnergyProductionCCReport = EnergyProductionCCReport = __decorate([
    (0, CommandClassDecorators_1.CCCommand)(_Types_1.EnergyProductionCommand.Report)
], EnergyProductionCCReport);
function testResponseForEnergyProductionGet(sent, received) {
    return received.parameter === sent.parameter;
}
let EnergyProductionCCGet = class EnergyProductionCCGet extends EnergyProductionCC {
    constructor(host, options) {
        super(host, options);
        if ((0, CommandClass_1.gotDeserializationOptions)(options)) {
            (0, core_1.validatePayload)(this.payload.length >= 1);
            this.parameter = this.payload[0];
        }
        else {
            this.parameter = options.parameter;
        }
    }
    parameter;
    serialize() {
        this.payload = Buffer.from([this.parameter]);
        return super.serialize();
    }
    toLogEntry(applHost) {
        return {
            ...super.toLogEntry(applHost),
            message: {
                parameter: (0, shared_1.getEnumMemberName)(_Types_1.EnergyProductionParameter, this.parameter),
            },
        };
    }
};
exports.EnergyProductionCCGet = EnergyProductionCCGet;
exports.EnergyProductionCCGet = EnergyProductionCCGet = __decorate([
    (0, CommandClassDecorators_1.CCCommand)(_Types_1.EnergyProductionCommand.Get),
    (0, CommandClassDecorators_1.expectedCCResponse)(EnergyProductionCCReport, testResponseForEnergyProductionGet)
], EnergyProductionCCGet);
//# sourceMappingURL=EnergyProductionCC.js.map