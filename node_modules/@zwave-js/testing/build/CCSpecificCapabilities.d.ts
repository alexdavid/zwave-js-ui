import { type CommandClasses, type ConfigValue, type ConfigValueFormat } from "@zwave-js/core";
export interface ConfigurationCCCapabilities {
    bulkSupport?: false;
    parameters: {
        "#": number;
        valueSize: number;
        name?: string;
        info?: string;
        format?: ConfigValueFormat;
        minValue?: ConfigValue;
        maxValue?: ConfigValue;
        defaultValue?: ConfigValue;
        readonly?: boolean;
        isAdvanced?: boolean;
        altersCapabilities?: boolean;
    }[];
}
export interface NotificationCCCapabilities {
    supportsV1Alarm: false;
    notificationTypesAndEvents: Record<number, number[]>;
}
export interface MultilevelSensorCCCapabilities {
    sensors: Record<number, {
        supportedScales: number[];
    }>;
    getValue?: (sensorType: number | undefined, scale: number | undefined) => number | undefined;
}
export interface SoundSwitchCCCapabilities {
    defaultToneId: number;
    defaultVolume: number;
    tones: {
        name: string;
        duration: number;
    }[];
}
export interface WindowCoveringCCCapabilities {
    supportedParameters: number[];
}
export interface EnergyProductionCCCapabilities {
    values: {
        Power: {
            value: number;
            scale: 0;
        };
        "Production Total": {
            value: number;
            scale: 0;
        };
        "Production Today": {
            value: number;
            scale: 0;
        };
        "Total Time": {
            value: number;
            scale: 0 | 1;
        };
    };
}
export interface ThermostatModeCCCapabilities {
    supportedModes: number[];
}
export interface ThermostatSetpointCCCapabilities {
    setpoints: Record<number, {
        minValue: number;
        maxValue: number;
        defaultValue?: number;
        scale: "°C" | "°F";
    }>;
}
export interface UserCodeCCCapabilities {
    numUsers: number;
    supportsMasterCode?: boolean;
    supportsMasterCodeDeactivation?: boolean;
    supportsUserCodeChecksum?: boolean;
    supportedUserIDStatuses?: number[];
    supportedKeypadModes?: number[];
    supportedASCIIChars?: string;
}
export interface ScheduleEntryLockCCCapabilities {
    numWeekDaySlots: number;
    numYearDaySlots: number;
    numDailyRepeatingSlots: number;
}
export type CCSpecificCapabilities = {
    [CommandClasses.Configuration]: ConfigurationCCCapabilities;
    [CommandClasses.Notification]: NotificationCCCapabilities;
    [49]: MultilevelSensorCCCapabilities;
    [121]: SoundSwitchCCCapabilities;
    [106]: WindowCoveringCCCapabilities;
    [144]: EnergyProductionCCCapabilities;
    [64]: ThermostatModeCCCapabilities;
    [67]: ThermostatSetpointCCCapabilities;
    [99]: UserCodeCCCapabilities;
    [78]: ScheduleEntryLockCCCapabilities;
};
export type CCIdToCapabilities<T extends CommandClasses = CommandClasses> = T extends keyof CCSpecificCapabilities ? CCSpecificCapabilities[T] : never;
//# sourceMappingURL=CCSpecificCapabilities.d.ts.map