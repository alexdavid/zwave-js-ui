"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerialLogger = void 0;
const core_1 = require("@zwave-js/core");
const shared_1 = require("@zwave-js/shared");
const Logger_safe_1 = require("./Logger_safe");
const MessageHeaders_1 = require("./MessageHeaders");
class SerialLogger extends core_1.ZWaveLoggerBase {
    constructor(loggers) {
        super(loggers, Logger_safe_1.SERIAL_LABEL);
    }
    isVisible() {
        return this.container.isLoglevelVisible(Logger_safe_1.SERIAL_LOGLEVEL);
    }
    /**
     * Logs transmission or receipt of an ACK frame
     * @param direction The direction this ACK was sent
     */
    ACK(direction) {
        if (this.isVisible()) {
            this.logMessageHeader(direction, MessageHeaders_1.MessageHeaders.ACK);
        }
    }
    /**
     * Logs transmission or receipt of an NAK frame
     * @param direction The direction this NAK was sent
     */
    NAK(direction) {
        if (this.isVisible()) {
            this.logMessageHeader(direction, MessageHeaders_1.MessageHeaders.NAK);
        }
    }
    /**
     * Logs transmission or receipt of an CAN frame
     * @param direction The direction this CAN was sent
     */
    CAN(direction) {
        if (this.isVisible()) {
            this.logMessageHeader(direction, MessageHeaders_1.MessageHeaders.CAN);
        }
    }
    /**
     * Logs receipt of unexpected data while waiting for an ACK, NAK, CAN, or data frame
     */
    discarded(data) {
        if (this.isVisible()) {
            const direction = "inbound";
            this.logger.log({
                level: "warn",
                primaryTags: "[DISCARDED]",
                message: `invalid data ${(0, shared_1.buffer2hex)(data)}`,
                secondaryTags: `(${data.length} bytes)`,
                direction: (0, core_1.getDirectionPrefix)(direction),
                context: {
                    source: "serial",
                    direction,
                },
            });
        }
    }
    logMessageHeader(direction, header) {
        this.logger.log({
            level: Logger_safe_1.SERIAL_LOGLEVEL,
            primaryTags: `[${MessageHeaders_1.MessageHeaders[header]}]`,
            message: "",
            secondaryTags: `(${(0, shared_1.num2hex)(header)})`,
            direction: (0, core_1.getDirectionPrefix)(direction),
            context: {
                source: "serial",
                header: (0, shared_1.getEnumMemberName)(MessageHeaders_1.MessageHeaders, header),
                direction,
            },
        });
    }
    /**
     * Logs transmission or receipt of a data chunk
     * @param direction The direction the data was sent
     * @param data The data that was transmitted or received
     */
    data(direction, data) {
        if (this.isVisible()) {
            this.logger.log({
                level: Logger_safe_1.SERIAL_LOGLEVEL,
                message: `0x${data.toString("hex")}`,
                secondaryTags: `(${data.length} bytes)`,
                direction: (0, core_1.getDirectionPrefix)(direction),
                context: {
                    source: "serial",
                    direction,
                },
            });
        }
    }
    // /**
    //  * Logs the current content of the receive buffer
    //  * @param data The data that is currently in the receive buffer
    //  */
    // export function receiveBuffer(data: Buffer, isComplete: boolean): void {
    // 	if (isVisible()) {
    // 		getLogger().log({
    // 			level: isComplete ? SERIAL_LOGLEVEL : "silly",
    // 			primaryTags: isComplete ? undefined : "[incomplete]",
    // 			message: `Buffer := 0x${data.toString("hex")}`,
    // 			secondaryTags: `(${data.length} bytes)`,
    // 			direction: getDirectionPrefix("none"),
    // 		});
    // 	}
    // }
    /**
     * Logs a message
     * @param message The message to output
     */
    message(message) {
        if (this.isVisible()) {
            this.logger.log({
                level: Logger_safe_1.SERIAL_LOGLEVEL,
                message,
                direction: (0, core_1.getDirectionPrefix)("none"),
                context: {
                    source: "serial",
                    direction: "none",
                },
            });
        }
    }
    /**
     * Prints output from the bootloader
     * @param screen The "screen" to output
     */
    bootloaderScreen(screen) {
        if (this.isVisible()) {
            this.logger.log({
                level: "silly",
                message: screen,
                direction: (0, core_1.getDirectionPrefix)("inbound"),
                context: {
                    source: "serial",
                    direction: "inbound",
                },
            });
        }
    }
}
exports.SerialLogger = SerialLogger;
//# sourceMappingURL=Logger.js.map