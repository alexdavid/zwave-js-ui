import { type MessagePriority, ZWaveError, ZWaveErrorCodes } from "@zwave-js/core";
import type { Message } from "@zwave-js/serial";
import { type AnyStateMachine, Interpreter, type InterpreterFrom, type InterpreterOptions } from "xstate";
import type { SerialAPICommandDoneData } from "./SerialAPICommandMachine";
import type { Transaction } from "./Transaction";
export declare function serialAPICommandErrorToZWaveError(reason: (SerialAPICommandDoneData & {
    type: "failure";
})["reason"], sentMessage: Message, receivedMessage: Message | undefined, transactionSource: string | undefined): ZWaveError;
export declare function createMessageDroppedUnexpectedError(original: Error): ZWaveError;
/** Tests whether the given error is one that was caused by the serial API execution */
export declare function isSerialCommandError(error: unknown): boolean;
export type ExtendedInterpreterFrom<TMachine extends AnyStateMachine | ((...args: any[]) => AnyStateMachine)> = Extended<InterpreterFrom<TMachine>>;
export type Extended<TInterpreter extends Interpreter<any, any, any, any, any>> = TInterpreter & {
    restart(): TInterpreter;
};
/** Extends the default xstate interpreter with a restart function that re-attaches all event handlers */
export declare function interpretEx<TMachine extends AnyStateMachine>(machine: TMachine, options?: Partial<InterpreterOptions>): ExtendedInterpreterFrom<TMachine>;
export type TransactionReducerResult = {
    type: "drop";
} | {
    type: "keep";
} | {
    type: "reject";
    message: string;
    code: ZWaveErrorCodes;
} | {
    type: "resolve";
    message?: Message;
} | {
    type: "requeue";
    reset?: boolean;
    priority?: MessagePriority;
    tag?: any;
};
export type TransactionReducer = (transaction: Transaction, source: "queue" | "active") => TransactionReducerResult;
//# sourceMappingURL=StateMachineShared.d.ts.map