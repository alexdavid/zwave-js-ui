"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasicCCBehaviors = void 0;
const BasicCC_1 = require("@zwave-js/cc/BasicCC");
const safe_1 = require("@zwave-js/core/safe");
const testing_1 = require("@zwave-js/testing");
const STATE_KEY_PREFIX = "Basic_";
const StateKeys = {
    currentValue: `${STATE_KEY_PREFIX}currentValue`,
};
const respondToBasicGet = {
    async onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof BasicCC_1.BasicCCGet) {
            // Do not respond if BasicCC is not explicitly listed as supported
            if (!self.implementedCCs.get(safe_1.CommandClasses.Basic)?.isSupported) {
                return false;
            }
            const cc = new BasicCC_1.BasicCCReport(self.host, {
                nodeId: controller.host.ownNodeId,
                currentValue: (self.state.get(StateKeys.currentValue)
                    ?? 0),
            });
            await self.sendToController((0, testing_1.createMockZWaveRequestFrame)(cc, {
                ackRequested: false,
            }));
            return true;
        }
        return false;
    },
};
const respondToBasicSet = {
    onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof BasicCC_1.BasicCCSet) {
            self.state.set(StateKeys.currentValue, frame.payload.targetValue);
            return true;
        }
        return false;
    },
};
exports.BasicCCBehaviors = [respondToBasicGet, respondToBasicSet];
//# sourceMappingURL=Basic.js.map