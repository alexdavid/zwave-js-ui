"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserCodeCCBehaviors = exports.defaultCapabilities = void 0;
const cc_1 = require("@zwave-js/cc");
const UserCodeCC_1 = require("@zwave-js/cc/UserCodeCC");
const safe_1 = require("@zwave-js/core/safe");
const testing_1 = require("@zwave-js/testing");
exports.defaultCapabilities = {
    numUsers: 1,
    supportedASCIIChars: "0123456789",
    supportsMasterCode: true,
    supportsMasterCodeDeactivation: true,
    supportsUserCodeChecksum: true,
    supportedKeypadModes: [cc_1.KeypadMode.Normal],
    supportedUserIDStatuses: [
        cc_1.UserIDStatus.Available,
        cc_1.UserIDStatus.Enabled,
        cc_1.UserIDStatus.Disabled,
    ],
};
const STATE_KEY_PREFIX = "UserCode_";
const StateKeys = {
    userCode: (userId) => `${STATE_KEY_PREFIX}userCode_${userId}`,
    userIdStatus: (userId) => `${STATE_KEY_PREFIX}userIdStatus_${userId}`,
    masterCode: `${STATE_KEY_PREFIX}masterCode`,
    keypadMode: `${STATE_KEY_PREFIX}keypadMode`,
};
const respondToUsersNumberGet = {
    async onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof UserCodeCC_1.UserCodeCCUsersNumberGet) {
            const capabilities = {
                ...exports.defaultCapabilities,
                ...self.getCCCapabilities(safe_1.CommandClasses["User Code"], frame.payload.endpointIndex),
            };
            const cc = new UserCodeCC_1.UserCodeCCUsersNumberReport(self.host, {
                nodeId: controller.host.ownNodeId,
                supportedUsers: capabilities.numUsers ?? 1,
            });
            await self.sendToController((0, testing_1.createMockZWaveRequestFrame)(cc, {
                ackRequested: false,
            }));
            return true;
        }
        return false;
    },
};
const respondToUserGet = {
    async onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof UserCodeCC_1.UserCodeCCGet) {
            const capabilities = {
                ...exports.defaultCapabilities,
                ...self.getCCCapabilities(safe_1.CommandClasses["User Code"], frame.payload.endpointIndex),
            };
            const userId = frame.payload.userId;
            let cc;
            if (capabilities.numUsers >= userId) {
                cc = new UserCodeCC_1.UserCodeCCReport(self.host, {
                    nodeId: controller.host.ownNodeId,
                    userId,
                    userIdStatus: (self.state.get(StateKeys.userIdStatus(userId)) ?? cc_1.UserIDStatus.Available),
                    userCode: self.state.get(StateKeys.userCode(userId)),
                });
            }
            else {
                cc = new UserCodeCC_1.UserCodeCCReport(self.host, {
                    nodeId: controller.host.ownNodeId,
                    userId,
                    userIdStatus: cc_1.UserIDStatus.StatusNotAvailable,
                });
            }
            await self.sendToController((0, testing_1.createMockZWaveRequestFrame)(cc, {
                ackRequested: false,
            }));
            return true;
        }
        return false;
    },
};
const respondToUserCodeSet = {
    onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof UserCodeCC_1.UserCodeCCSet) {
            const capabilities = {
                ...exports.defaultCapabilities,
                ...self.getCCCapabilities(safe_1.CommandClasses["User Code"], frame.payload.endpointIndex),
            };
            const userId = frame.payload.userId;
            const userIdStatus = frame.payload.userIdStatus;
            if (capabilities.numUsers >= userId) {
                self.state.set(StateKeys.userIdStatus(userId), userIdStatus);
                const code = userIdStatus !== cc_1.UserIDStatus.Available
                    && userIdStatus !== cc_1.UserIDStatus.StatusNotAvailable
                    ? frame.payload.userCode
                    : undefined;
                self.state.set(StateKeys.userCode(userId), code);
            }
            return true;
        }
        return false;
    },
};
const respondToUserCodeCapabilitiesGet = {
    async onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof UserCodeCC_1.UserCodeCCCapabilitiesGet) {
            const capabilities = {
                ...exports.defaultCapabilities,
                ...self.getCCCapabilities(safe_1.CommandClasses["User Code"], frame.payload.endpointIndex),
            };
            const cc = new UserCodeCC_1.UserCodeCCCapabilitiesReport(self.host, {
                nodeId: controller.host.ownNodeId,
                supportsMasterCode: capabilities.supportsMasterCode,
                supportsMasterCodeDeactivation: capabilities
                    .supportsMasterCodeDeactivation,
                supportsUserCodeChecksum: capabilities
                    .supportsUserCodeChecksum,
                supportsMultipleUserCodeReport: false,
                supportsMultipleUserCodeSet: false,
                supportedUserIDStatuses: capabilities.supportedUserIDStatuses,
                supportedKeypadModes: capabilities.supportedKeypadModes,
                supportedASCIIChars: capabilities.supportedASCIIChars,
            });
            await self.sendToController((0, testing_1.createMockZWaveRequestFrame)(cc, {
                ackRequested: false,
            }));
            return true;
        }
        return false;
    },
};
const respondToUserCodeKeypadModeGet = {
    async onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof UserCodeCC_1.UserCodeCCKeypadModeGet) {
            const capabilities = {
                ...exports.defaultCapabilities,
                ...self.getCCCapabilities(safe_1.CommandClasses["User Code"], frame.payload.endpointIndex),
            };
            const cc = new UserCodeCC_1.UserCodeCCKeypadModeReport(self.host, {
                nodeId: controller.host.ownNodeId,
                keypadMode: (self.state.get(StateKeys.keypadMode)
                    ?? capabilities.supportedKeypadModes?.[0]
                    ?? cc_1.KeypadMode.Normal),
            });
            await self.sendToController((0, testing_1.createMockZWaveRequestFrame)(cc, {
                ackRequested: false,
            }));
            return true;
        }
        return false;
    },
};
const respondToUserCodeKeypadModeSet = {
    onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof UserCodeCC_1.UserCodeCCKeypadModeSet) {
            const capabilities = {
                ...exports.defaultCapabilities,
                ...self.getCCCapabilities(safe_1.CommandClasses["User Code"], frame.payload.endpointIndex),
            };
            if (capabilities.supportedKeypadModes?.includes(frame.payload.keypadMode)) {
                self.state.set(StateKeys.keypadMode, frame.payload.keypadMode);
            }
            return true;
        }
        return false;
    },
};
const respondToUserCodeMasterCodeSet = {
    onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof UserCodeCC_1.UserCodeCCMasterCodeSet) {
            const capabilities = {
                ...exports.defaultCapabilities,
                ...self.getCCCapabilities(safe_1.CommandClasses["User Code"], frame.payload.endpointIndex),
            };
            const masterCode = frame.payload.masterCode;
            if (capabilities.supportsMasterCode) {
                if (masterCode.length > 0
                    || capabilities.supportsMasterCodeDeactivation) {
                    self.state.set(StateKeys.masterCode, frame.payload.masterCode);
                }
            }
            return true;
        }
        return false;
    },
};
const respondToUserCodeMasterCodeGet = {
    async onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof UserCodeCC_1.UserCodeCCMasterCodeGet) {
            const capabilities = {
                ...exports.defaultCapabilities,
                ...self.getCCCapabilities(safe_1.CommandClasses["User Code"], frame.payload.endpointIndex),
            };
            let masterCode;
            if (capabilities.supportsMasterCode) {
                masterCode = self.state.get(StateKeys.masterCode);
            }
            const cc = new UserCodeCC_1.UserCodeCCMasterCodeReport(self.host, {
                nodeId: controller.host.ownNodeId,
                masterCode: masterCode ?? "",
            });
            await self.sendToController((0, testing_1.createMockZWaveRequestFrame)(cc, {
                ackRequested: false,
            }));
            return true;
        }
        return false;
    },
};
const respondToUserCodeUserCodeChecksumGet = {
    async onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof UserCodeCC_1.UserCodeCCUserCodeChecksumGet) {
            const capabilities = {
                ...exports.defaultCapabilities,
                ...self.getCCCapabilities(safe_1.CommandClasses["User Code"], frame.payload.endpointIndex),
            };
            if (capabilities.supportsUserCodeChecksum) {
                let data = Buffer.allocUnsafe(0);
                for (let i = 1; i <= capabilities.numUsers; i++) {
                    const status = self.state.get(StateKeys.userIdStatus(i));
                    let code = (self.state.get(StateKeys.userCode(i)) ?? "");
                    if (status === undefined
                        || status === cc_1.UserIDStatus.Available
                        || code.length === 0) {
                        continue;
                    }
                    const tmp = Buffer.allocUnsafe(3 + code.length);
                    tmp.writeUInt16BE(i, 0);
                    tmp[2] = status;
                    if (typeof code === "string") {
                        code = Buffer.from(code, "ascii");
                    }
                    code.copy(tmp, 3);
                    data = Buffer.concat([data, tmp]);
                }
                const checksum = data.length > 0 ? (0, safe_1.CRC16_CCITT)(data) : 0x0000;
                const cc = new UserCodeCC_1.UserCodeCCUserCodeChecksumReport(self.host, {
                    nodeId: controller.host.ownNodeId,
                    userCodeChecksum: checksum,
                });
                await self.sendToController((0, testing_1.createMockZWaveRequestFrame)(cc, {
                    ackRequested: false,
                }));
            }
            return true;
        }
        return false;
    },
};
exports.UserCodeCCBehaviors = [
    respondToUsersNumberGet,
    respondToUserGet,
    respondToUserCodeSet,
    respondToUserCodeCapabilitiesGet,
    respondToUserCodeKeypadModeGet,
    respondToUserCodeKeypadModeSet,
    respondToUserCodeMasterCodeGet,
    respondToUserCodeMasterCodeSet,
    respondToUserCodeUserCodeChecksumGet,
];
//# sourceMappingURL=UserCode.js.map