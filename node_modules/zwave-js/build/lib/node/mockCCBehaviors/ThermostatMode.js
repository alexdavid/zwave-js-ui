"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThermostatModeCCBehaviors = void 0;
const cc_1 = require("@zwave-js/cc");
const ThermostatModeCC_1 = require("@zwave-js/cc/ThermostatModeCC");
const safe_1 = require("@zwave-js/core/safe");
const testing_1 = require("@zwave-js/testing");
const defaultCapabilities = {
    supportedModes: [cc_1.ThermostatMode.Off],
};
const STATE_KEY_PREFIX = "ThermostatMode_";
const StateKeys = {
    mode: `${STATE_KEY_PREFIX}mode`,
    manufacturerData: `${STATE_KEY_PREFIX}manufacturerData`,
};
const respondToThermostatModeSet = {
    onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof ThermostatModeCC_1.ThermostatModeCCSet) {
            self.state.set(StateKeys.mode, frame.payload.mode);
            self.state.set(StateKeys.manufacturerData, frame.payload.manufacturerData);
            return true;
        }
        return false;
    },
};
const respondToThermostatModeGet = {
    async onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof ThermostatModeCC_1.ThermostatModeCCGet) {
            const mode = (self.state.get(StateKeys.mode)
                ?? cc_1.ThermostatMode.Off);
            const manufacturerData = mode === cc_1.ThermostatMode["Manufacturer specific"]
                ? self.state.get(StateKeys.manufacturerData)
                : undefined;
            const cc = new ThermostatModeCC_1.ThermostatModeCCReport(self.host, {
                nodeId: controller.host.ownNodeId,
                // @ts-expect-error yeah yeah...
                mode,
                // @ts-expect-error I know...
                manufacturerData,
            });
            await self.sendToController((0, testing_1.createMockZWaveRequestFrame)(cc, {
                ackRequested: false,
            }));
            return true;
        }
        return false;
    },
};
const respondToThermostatModeSupportedGet = {
    async onControllerFrame(controller, self, frame) {
        if (frame.type === testing_1.MockZWaveFrameType.Request
            && frame.payload instanceof ThermostatModeCC_1.ThermostatModeCCSupportedGet) {
            const capabilities = {
                ...defaultCapabilities,
                ...self.getCCCapabilities(safe_1.CommandClasses["Thermostat Mode"], frame.payload.endpointIndex),
            };
            const cc = new ThermostatModeCC_1.ThermostatModeCCSupportedReport(self.host, {
                nodeId: controller.host.ownNodeId,
                supportedModes: capabilities.supportedModes,
            });
            await self.sendToController((0, testing_1.createMockZWaveRequestFrame)(cc, {
                ackRequested: false,
            }));
            return true;
        }
        return false;
    },
};
exports.ThermostatModeCCBehaviors = [
    respondToThermostatModeGet,
    respondToThermostatModeSet,
    respondToThermostatModeSupportedGet,
];
//# sourceMappingURL=ThermostatMode.js.map